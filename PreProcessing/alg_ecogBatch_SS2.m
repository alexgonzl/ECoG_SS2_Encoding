
function alg_ecogBatch_SS2(subjnum,block,flags,basepath,bef_win,aft_win, overwrite,minfreq,maxfreq)
%
% Usage:
% ecogBatch('02','ST03_bl76','pfcdes');
% 
% This batch function will call makeparSubj02AIN.m to generate a
% parameter file for the desired block, parSubj02AIN.mat, and store
% it in the RawData/block directory
%
% flags:
% p: Create parfile, otherwise load existing parfile.
% f: Filter (ecogNoiseFiltData)
% a: Artifact replacement (ecogArtReplace)
% c: Common average reference (ecogCommonAvgRef)
% b: Calculate power in defined frequency band (ecogBBcalc)
% d: Calculate amplitude & phase (ecogDataDecompose)
% t: Set timestamps (ecogStampfunc)
% e: Make ERPs (ecogERP)
% s: Make ERSPs (ecogERSP)
% z: make ZERPs (ecogZERP) normalized ERPs
% k: make ERBB (ecogERBB)
%
% basepath is an optional argument
%
% j.chen 07/12/10
% edited for Old new task al.gonz. 08/09/11

%% Paths
if ~exist('basepath','var')
    basepath = ['/biac4/wagner/biac3/wagner7/ecog/subj' subjnum '/ecog/SS2'];
end
addpath(basepath);
parfile = fullfile(basepath,'RawData',block,['parSubj' subjnum 'SS2.mat']); % generated by makeParSubj16bAIN

if exist(parfile,'file') && ~overwrite
    load(parfile)
else
    funcname = ['makeparSubj' subjnum 'SS2'];
    cmd = ['par = ' funcname '(block,basepath,parfile)'];
    eval(cmd);
end
par.basepath = basepath;
% Update path info based on par.basepath
par = ecogPathUpdate(par);

% Params for bandpass filtering
if ~exist('minfreq','var')
minfreq = 4;
maxfreq = 10;
end

%% Create parameters
if ismember('p',flags)
    % Create a new parfile
    % par = makeparSubj07AIN(block,basepath,parfile);
    funcname = ['makeparSubj' subjnum 'SS2'];
    cmd = ['par = ' funcname '(block,basepath,parfile)'];
    eval(cmd);
end
par.basepath = basepath;
% Update path info based on par.basepath
par = ecogPathUpdate(par);

% Remove missing channels from electrode list
elecs = [1:par.nchan];
if isfield(par,'missingchan')
    elecs=elecs(~ismember(elecs,par.missingchan));
end

% The reference, epileptic and "bad" channels should never be included in
% the CAR. They are removed within ecogCommonAvgRef. However, we do want to
% subtract the CAR from everything BUT the reference, so they are still included
% in elecs when we pass it to ecogNoiseFiltData and ecogCommonAvgRef.

%% Filter 60 Hz line noise
if ismember('f',flags')
    ecogNoiseFiltData(par,elecs);
end

%% Artifact detection/replacement
if ismember('a',flags)
    % outMat = ecogArtReplace(par,elecs,doreplace,threshstd,rejectwins,showme)
%     elecs=elecs(~ismember(elecs,par.badchan));
    outMat = ecogArtReplace(par,elecs,1,5,0,0);
end

%% re-referencing data to the common average reference CAR
if ismember('c',flags)
    ecogCommonAvgRef(par,'noiseFilt',elecs) % 'orig','noiseFilt','artRep'
end

%% Remove bad (but not epileptic) channels from remaining analyses
elecs=elecs(~ismember(elecs,par.badchan));
% elecs=elecs(~ismember(elecs,par.epichan));

%% Calculate power in defined frequency band
if ismember('b',flags)
    ecogBBcalc(par,elecs,minfreq,maxfreq);
end

%% Decompose signal into Amplitude and Phase for different frequencies
if ismember('d',flags)
    overwrite = 1;
    ecogDataDecompose(par,elecs,overwrite);
end

%% Assign timestamps
stampspath = fullfile(par.BehavData,['pdioevents_' par.block '.mat']);
if ismember('t',flags)
    [truestamps,conds,firstEvent] = ecogStampfunc(par.RawData,par.BehavData,par.pdiochan,...
        par.ieegrate,par.pdiorate,par.eventfile);
    save(stampspath,'truestamps','firstEvent','conds');
end

%% Set conds
if ismember('e',flags) || ismember('s',flags) || ismember('z',flags) || ismember('k',flags)
    load(stampspath);
    
    % Remove stamps that overlap periods identified as outliers by ArtReplace
    % Checks only in par.rejelecs for outliers
%     otl_bef_win = 0.2;
%     otl_aft_win = 1.5;
    
    otl_bef_win = bef_win;
    otl_aft_win = aft_win;
    % bad_count: how many events rejected
    % bad_conds: list of conditions of events rejected
    [truestamps conds bad_count bad_conds] = ...
        ecogCleanStamps(par,truestamps,conds,otl_bef_win,otl_aft_win);
    
    % Conditions
%     bef_win = 0.2; % AIN 1p7
%     aft_win = 1.5;
    condnames = {...
        'all','HChits','LChits','HCcr','HCcr',...
        'hits','cr','misses','fa','old','new'};
    
    codes.all = [0:6]; 
    codes.HChits =[1];
    codes.LChits =[5];
    codes.HCcr =[2];
    codes.HCcr =[6];
    codes.hits = [1 5];
    codes.cr = [2 6];
    codes.misses = 3;
    codes.fa = 4;
    codes.old = [1 3 5];
    codes.new = [2 4 6];
    condstamps = []; MXnumEvents = [];
    
    for n = 1:length(condnames)
        temp = [];
        for q = 1:length(codes.(condnames{n}))
            mycond = codes.(condnames{n})(q);
            temp = [temp; truestamps(conds==mycond)];
        end
        MXnumEvents(n) = length(temp);
        condstamps{n} = sort(temp);
    end

    % These time periods will be used to calculate Stdevs for this block:
    % only the windows that actually go into trials
    temp = [];
    for n = 1:length(codes.all)
        mycond = codes.all(n);
        temp = [temp; truestamps(conds==mycond)];
    end
    keptstamps = temp;
        
    clear startstamps; clear endstamps;
    startstamps = keptstamps - otl_bef_win;
    endstamps = keptstamps + otl_aft_win;
    
    if 1
        figure;
        for r = 1:length(par.rejelecs)
            fname = sprintf('%s/CARiEEG%s_%.2d.mat',par.CARData,par.block,par.rejelecs(r));
            car = load(fname);
            fname = sprintf('%s/aiEEG%s_%.2d.mat',par.ArtData,par.block,par.rejelecs(r));
            art = load(fname);
            subplot(length(par.rejelecs),1,r);
            plot(car.wave,'b-'); hold on
            plot(find(art.outliers),art.wave(find(art.outliers)),'r.');
            for i = 1:length(startstamps)
                plot([startstamps(i)*par.ieegrate endstamps(i)*par.ieegrate],[0 0],'c-');
            end
            title([par.subjname ' ' par.block ': Elec ' num2str(par.rejelecs(r))]);
        end
    end
end

%% Generating ERP
if ismember('e',flags)
    poststimbase = 0;
    ecogERP(par,bef_win,aft_win,condstamps,condnames,elecs,poststimbase);
end

%% Generating ERSP
if ismember('s',flags)
    ecogERSP(par,bef_win,aft_win,condstamps,condnames,elecs);
end

%% Generating Stdev and ZERP
if ismember('z',flags)
    poststimbase = 0;
    stdev = ecogStdev(par,startstamps,endstamps,elecs);
    ecogZERP(par,stdev,bef_win,aft_win,condstamps,condnames,elecs,poststimbase);
end

%% Generating ERBB
if ismember('k',flags)
    poststimbase = 0;
    ecogERBB(par,bef_win,aft_win,condstamps,condnames,elecs,poststimbase,minfreq,maxfreq);
end






